# action.yml
name: "SOOS Core SCA"
author: "SOOS"
description: "Execute SOOS SCA analysis using your remote SOOS configuration"
branding:
  icon: "alert-triangle"
  color: "yellow"
inputs:
  api_key:
    description: 'SOOS API Key'
    required: true
  api_url:
    description: 'SOOS API URL - Internal Use Only'
    required: false
    default: 'https://api.soos.io/api/'
  branch_uri:
    description: 'Branch URI'
    required: false
    default: '${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref || github.ref_name }}'
  branch_name:
    description: 'Branch Name'
    required: false
    default: '${{ github.head_ref || github.ref_name }}'
  build_uri:
    description: 'Build URI'
    required: false
    default: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
  build_version:
    description: 'Version of application build artifacts.'
    required: false
  client_id:
    description: 'SOOS Client ID'
    required: true
  directories_to_exclude:
    description: 'Directories to Exclude: Listing of directories (relative to ./) to exclude from the search for manifest files. Example - Correct: bin/start/  Example - Incorrect: ./bin/start/ Example - Incorrect: /bin/start'
    required: false
  export_format:
    description: "Export format."
    required: false
  export_file_type:
    description: "Export file type."
    required: false
  files_to_exclude:
    description: 'Files to Exclude: Listing of files (relative to ./) to exclude from the search for manifest files. Example - Correct: bin/start/requirements.txt ... Example - Incorrect: ./bin/start/requirements.txt ... Example - Incorrect: /bin/start/requirements.txt'
    required: false
  log_level:
    description: 'Log level to show: DEBUG, INFO, WARN, ERROR, CRITICAL.'
    required: false
    default: 'INFO'
  on_failure:
    description: 'Set the On Failure Scan Strategy: fail_the_build, and continue_on_failure'
    required: false
    default: 'continue_on_failure'
  operating_environment:
    description: 'System Info - Internal Use Only'
    required: false
    default: ${{ runner.os }}
  output_directory:
    description: 'Export file destination'
    required: false
  package_managers:
    description: 'List (comma separated) of Package Managers to filter manifest search. (Dart, Erlang, Homebrew, PHP, Java, Nuget, NPM, Python, Ruby, Rust.)'
    required: false
    default: ''
  project_name:
    description: 'The project name that will be displayed on the dashboard. By Default is owner/repository_name'
    required: true
    default: ${{ github.repository }}
  sca_version:
    description: 'The SOOS SCA version to use - Internal Use Only'
    required: false
    default: 'latest'
  working_directory: 
    description: 'Working directory, defaults to the current GitHub workspace'
    required: false
    default: '${{ github.workspace }}'

runs:
  using: "composite"
  steps:
    - name: Check version
      shell: bash
      env:
        SOOS_ACTION_REF: ${{ github.action_ref }}
      run: |
        set +x  # Turn off command echoing
        printf '%.0s-' {1..80}
        printf '\n'        
        response=$(curl -s https://api.github.com/repos/soos-io/soos-sast-github-action/releases/latest || true)        
        if [ -n "$response" ]; then
          latest_tag=$(echo "$response" | grep -oP '"tag_name": "\K(.*)(?=")')          
          if [ -n "$latest_tag" ]; then
            current_tag=$(echo "$SOOS_ACTION_REF" | awk -F'/' '{print $NF}')
            latest_tag_major=$(echo "$latest_tag" | awk -F'.' '{print $1}')            
            echo "Your current version is: $current_tag, The latest version is: $latest_tag_major"            
            if [[ "$current_tag" != "$latest_tag_major"* ]]; then
              echo "This action is outdated or using a commit reference. Please update to use the latest major version tag: $latest_tag_major"
            elif [[ "$current_tag" == "$latest_tag" ]]; then
              echo "It is recommended to use the major version tag, $latest_tag_major when referencing this action."
            elif [[ "$current_tag" != "$latest_tag_major" ]]; then
              echo "This action is out of date. It is recommended to use the major version tag, $latest_tag_major."
            fi
          else
            echo "Couldn't check the action version. No tag_name."
          fi
        else 
          echo "Couldn't check the action version. No response."
        fi
        printf '%.0s-' {1..80}
        printf '\n'

    - uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Set Arguments
      shell: bash
      env:
        SOOS_ACTION_REF: ${{ github.action_ref }}
      run: |
        set +x  # Turn off command echoing
        current_tag=$(echo "$SOOS_ACTION_REF" | awk -F'/' '{print $NF}')
        args="--integrationName=Github --integrationType=Plugin --appVersion=\"$current_tag\" "

        [ -n "${{ inputs.api_key }}" ] && args+="--apiKey=${{ inputs.api_key }} "
        [ -n "${{ inputs.api_url }}" ] && args+="--apiURL=${{ inputs.api_url }} "
        [ -n "${{ inputs.branch_name }}" ] && args+="--branchName=${{ inputs.branch_name }} "
        [ -n "${{ inputs.branch_uri }}" ] && args+="--branchURI=${{ inputs.branch_uri }} "
        [ -n "${{ inputs.build_uri }}" ] && args+="--buildURI=${{ inputs.build_uri }} "
        [ -n "${{ inputs.build_version }}" ] && args+="--buildVersion=${{ inputs.build_version }} "
        [ -n "${{ inputs.client_id }}" ] && args+="--clientId=${{ inputs.client_id }} "
        [ -n "${{ inputs.directories_to_exclude }}" ] && args+="--directoriesToExclude=\"${{ inputs.directories_to_exclude }}\" "
        [ -n "${{ inputs.export_format }}" ] && args+="--exportFormat=\"${{ inputs.export_format }}\" "
        [ -n "${{ inputs.export_file_type }}" ] && args+="--exportFileType=\"${{ inputs.export_file_type }}\" "
        [ -n "${{ inputs.files_to_exclude }}" ] && args+="--filesToExclude=\"${{ inputs.files_to_exclude }}\" "
        [ -n "${{ inputs.log_level }}" ] && args+="--logLevel=${{ inputs.log_level }} "
        [ -n "${{ inputs.on_failure }}" ] && args+="--onFailure=${{ inputs.on_failure }} "
        [ -n "${{ inputs.operating_environment }}" ] && args+="--operatingEnvironment=${{ inputs.operating_environment }} "
        [ -n "${{ inputs.package_managers }}" ] && args+="--packageManagers=${{ inputs.package_managers }} "
        [ -n "${{ inputs.project_name }}" ] && args+="--projectName=\"${{ inputs.project_name }}\" "
        [ -n "${{ inputs.output_directory }}" ] && args+="--outputDirectory=${{ inputs.output_directory }} "
        [ -n "${{ inputs.working_directory }}" ] && args+="--workingDirectory=${{ inputs.working_directory }} "        

        [ -n "${{ inputs.target_url }}" ] && args+="${{ inputs.target_url }}"

        echo "Arguments: $args"

        echo "args=$args" >> $GITHUB_ENV

    - name: Install and Run SOOS SCA
      shell: bash
      run: |
        [ -d "./soos" ] && rm -rf "./soos"
        npm install --prefix ./soos @soos-io/soos-sca@${{ inputs.sca_version }}
        cd ./soos
        SCRIPT_VERSION=$(npm list @soos-io/soos-sca --depth=0 | grep @soos-io/soos-sca | awk -F'@' '{print $NF}')
        cd ..
        eval "node ./soos/node_modules/@soos-io/soos-sca/bin/index.js --scriptVersion=$SCRIPT_VERSION $args"
